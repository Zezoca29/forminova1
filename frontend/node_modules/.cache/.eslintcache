[{"C:\\Users\\kaiqu\\forminova\\frontend\\src\\index.js":"1","C:\\Users\\kaiqu\\forminova\\frontend\\src\\App.js":"2","C:\\Users\\kaiqu\\forminova\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\kaiqu\\forminova\\frontend\\src\\components\\ProjectForm.js":"4","C:\\Users\\kaiqu\\forminova\\frontend\\src\\components\\PocForm.js":"5","C:\\Users\\kaiqu\\forminova\\frontend\\src\\components\\HardwareForm.js":"6","C:\\Users\\kaiqu\\forminova\\frontend\\src\\components\\assets\\js\\forms.js":"7","C:\\Users\\kaiqu\\forminova\\frontend\\src\\components\\FormDataDisplay.js":"8"},{"size":535,"mtime":1690934553627,"results":"9","hashOfConfig":"10"},{"size":6130,"mtime":1691390285820,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1690934553804,"results":"12","hashOfConfig":"10"},{"size":2434,"mtime":1691388170048,"results":"13","hashOfConfig":"10"},{"size":3306,"mtime":1691389105437,"results":"14","hashOfConfig":"10"},{"size":2436,"mtime":1691388154281,"results":"15","hashOfConfig":"10"},{"size":524,"mtime":1690941759658,"results":"16","hashOfConfig":"10"},{"size":2679,"mtime":1691387350544,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"i3uygj",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kaiqu\\forminova\\frontend\\src\\index.js",[],[],"C:\\Users\\kaiqu\\forminova\\frontend\\src\\App.js",["43"],[],"import React, { useState } from 'react';\nimport ProjectForm from './components/ProjectForm';\nimport HardwareForm from './components/HardwareForm';\nimport PocForm from './components/PocForm';\nimport FormDataDisplay from './components/FormDataDisplay';\nimport './components/assets/css/App.css';\nimport LogoInovacode from './components/assets/logo/logo2.0.png';\nimport axios from 'axios';\n\nfunction App() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    requestType: '',\n  });\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormData({ ...formData, [name]: value });\n  \n    // Specific handling for requestType\n    if (name === 'requestType') {\n      // Reset additional fields based on requestType\n      setFormData((prevFormData) => {\n        if (value === 'Projeto Vendido') {\n          return { ...prevFormData, projectName: '', companyName: '', cnpj: '', vendorName: '', totalValue: '', observations: '' };\n        } else if (value === 'Venda somente de hardwares') {\n          return { ...prevFormData, companyName: '', cnpj: '', vendorName: '', totalValue: '', observations: '' };\n        } else if (value === 'Prova de conceito (POC)') {\n          return { ...prevFormData, clientName: '', cnpj: '', salesRepresentative: '', sponsor: '', requestedSolution: '', pocDate: '', applicationContext: '', chargeClient: '' };\n        } else {\n          return prevFormData;\n        }\n      });\n    }\n  };\n  \n\n  const handleFormSubmit = () => {\n    // Combinar campos básicos com campos adicionais\n    let additionalFields = {};\n    if (formData.requestType === 'Projeto Vendido') {\n      additionalFields = {\n        projectName: formData.projectName,\n        companyName: formData.companyName,\n        cnpj: formData.cnpj,\n        vendorName: formData.vendorName,\n        totalValue: formData.totalValue,\n        observations: formData.observations,\n      };\n    } else if (formData.requestType === 'Venda somente de hardwares' || formData.requestType === 'Projeto PRO BONO (sem custo)') {\n      additionalFields = {\n        companyName: formData.companyName,\n        cnpj: formData.cnpj,\n        vendorName: formData.vendorName,\n        totalValue: formData.totalValue,\n        observations: formData.observations,\n      };\n    } else if (formData.requestType === 'Prova de conceito (POC)') {\n      additionalFields = {\n        clientName: formData.clientName,\n        cnpj: formData.cnpj,\n        salesRepresentative: formData.salesRepresentative,\n        sponsor: formData.sponsor,\n        requestedSolution: formData.requestedSolution,\n        pocDate: formData.pocDate,\n        applicationContext: formData.applicationContext,\n        chargeClient: formData.chargeClient,\n      };\n    } else {\n      return alert('Tipo de solicitação inválido');\n    }\n\n    const finalFormData = {\n      name: formData.name,\n      email: formData.email,\n      requestType: formData.requestType,\n      ...additionalFields,\n    };\n\n    axios\n      .post('http://localhost:5000/api/send-email', finalFormData)\n      .then((response) => {\n        console.log('Resposta do backend:', response.data);\n        alert('Formulário enviado com sucesso! Verifique seu email.');\n      })\n      .catch((error) => {\n        console.error('Erro ao enviar o formulário:', error);\n        alert('Ocorreu um erro ao enviar o formulário. Tente novamente mais tarde.');\n      });\n  };\n\n  const renderFormBasedOnRequestType = () => {\n    switch (formData.requestType) {\n      case 'Projeto Vendido':\n        return <ProjectForm formData={formData} handleChange={handleChange} onSubmit={handleFormSubmit} />;\n      case 'Venda somente de hardwares':\n        return <HardwareForm formData={formData} handleChange={handleChange} onSubmit={handleFormSubmit} />;\n      case 'Projeto Piloto':\n        return <ProjectForm formData={formData} handleChange={handleChange} onSubmit={handleFormSubmit} />;\n      case 'Projeto PRO BONO (sem custo)':\n        <ProjectForm formData={formData} handleChange={handleChange} onSubmit={handleFormSubmit} />;\n      case 'Prova de conceito (POC)':\n        return <PocForm formData={formData} handleChange={handleChange} onSubmit={handleFormSubmit} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"container-outer\">\n      <div className=\"App\">\n        <img src={LogoInovacode} alt=\"Inovacode Logo\" width=\"150\" height=\"60\" />\n\n        <h1>Formulário de Solicitação</h1>\n        <form onSubmit={handleFormSubmit}>\n          <div>\n            <label htmlFor=\"name\">Nome:</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleChange}\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"email\">E-mail:</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"requestType\">Tipo de Solicitação:</label>\n            <select\n              id=\"requestType\"\n              name=\"requestType\"\n              value={formData.requestType}\n              onChange={handleChange}\n              required\n            >\n              <option value=\"\">Selecione o tipo de solicitação</option>\n              <option value=\"Projeto Vendido\">Projeto Vendido</option>\n              <option value=\"Venda somente de hardwares\">Venda somente de hardwares</option>\n              <option value=\"Projeto PRO BONO (sem custo)\">Projeto PRO BONO (sem custo)</option>\n              <option value=\"Prova de conceito (POC)\">Prova de conceito (POC)</option>\n              <option value=\"Projeto Piloto\">Projeto Piloto</option>\n            </select>\n          </div>\n\n          {renderFormBasedOnRequestType()}\n          <button type=\"submit\">Enviar</button>\n          <FormDataDisplay formData={formData} />\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\kaiqu\\forminova\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\kaiqu\\forminova\\frontend\\src\\components\\ProjectForm.js",[],[],"C:\\Users\\kaiqu\\forminova\\frontend\\src\\components\\PocForm.js",[],[],"C:\\Users\\kaiqu\\forminova\\frontend\\src\\components\\HardwareForm.js",[],[],"C:\\Users\\kaiqu\\forminova\\frontend\\src\\components\\assets\\js\\forms.js",[],[],"C:\\Users\\kaiqu\\forminova\\frontend\\src\\components\\FormDataDisplay.js",[],[],{"ruleId":"44","severity":1,"message":"45","line":103,"column":7,"nodeType":"46","messageId":"47","endLine":104,"endColumn":104},"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case"]